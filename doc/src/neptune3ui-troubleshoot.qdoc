/****************************************************************************
**
** Copyright (C) 2019 Luxoft Sweden AB
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Neptune 3 UI.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \page neptune3ui-troubleshoot.html
    \title Neptune 3 UI - Troubleshoot
    \brief Describes how to troubleshoot issues that may arise with Neptune 3 UI.

    Neptune 3 UI provides logs that you can use to investigate issues that may arise. These logs
    can be configured via Qt's \l{https://doc.qt.io/qt-5/qloggingcategory.html}{Logging Category System}.
    In addition to controlling the categories using the \c QT_LOGGING_RULES environment variable
    and the global \c qtlogging.ini, the QtApplicationManager, which is Neptune 3 UI's base, also
    allows you to define these categories as a part of the \c am-config.yaml file.

    \note On embedded systems, Neptune 3 UI is started with systemd. Here, you can control the
    categories using environment variables or custom command-line arguments, via the
    \c neptune.service file. For more information, see \l{Neptune 3 UI systemd Service Settings}.

    \section1 Recreate the Application Database

    In the event that some of the Apps in Neptune 3 UI happen to be missing information, you can
    restore the application database to its initial state. To do so, launch Neptune 3 UI with the
    following command in your terminal:

    \badcode
    ./neptune3-ui -r
    \endcode

    \section1 View Logs after a Crash

    In the event of a crash, Neptune 3 UI prints a C++ stack trace or a QML stack trace to provide
    details on what went wrong. This information is printed in \c stderr. To retrieve more context
    on the cause of the crash, it's helpful to run Neptune 3 UI with complete logs enabled, using
    the \c{--verbose} command-line option.

    On embedded systems, Neptune 3 UI is started with systemd. All console output is automatically
    collected and can be retrieved using \c journalctl:

    \badcode
    journalctl -u neptune
    \endcode

    The Neptune 3 UI binary is a custom built QtApplicationManager, and as such, supports all of
    QtApplicationManager's command-line and configuration options, as described in
    \l{https://doc.qt.io/QtApplicationManager/configuration.html#}{Configuration}. For more details
    on how to troubleshoot QtApplicationManager issues,
    see \l{https://doc.qt.io/QtApplicationManager/troubleshoot.html}{Troubleshoot}.

*/
